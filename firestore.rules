rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }

    // Admin por custom claim o por rol en Firestore (compat)
    function isAdmin() {
      return isSignedIn() && (
        request.auth.token.admin == true ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    // ---------- USERS ----------
    match /users/{uid} {
      // Leer:
      // - Admin puede leer a todos
      // - Usuario solo su propio documento
      allow read: if isAdmin() || (isSignedIn() && request.auth.uid == uid);

      // Crear / Borrar: solo admin
      allow create, delete: if isAdmin();

      // Actualizar:
      // - Admin puede actualizar cualquiera
      // - Usuario solo su doc y NO puede cambiar su 'role'
      allow update: if
        isAdmin() ||
        (
          isSignedIn() &&
          request.auth.uid == uid &&
          (
            // si envía 'role', debe quedar igual al actual
            !( 'role' in request.resource.data ) ||
            request.resource.data.role == resource.data.role
          )
        );
    }

    // ---------- OBJECTS ----------
    match /objects/{id} {
      // Lectura: autenticados
      allow read: if isSignedIn();

      // Crear/Actualizar/Borrar: solo admin
      allow create, update, delete: if isAdmin();
    }

    // Bloquea todo lo demás
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
