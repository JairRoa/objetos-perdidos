rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /* USERS */
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow create: if request.auth != null &&
                    (request.auth.uid == request.resource.data.uid || isAdmin());
      allow update: if request.auth != null && (
        isAdmin() ||
        (request.auth.uid == userId &&
          (!('role' in request.resource.data) ||
           request.resource.data.role == resource.data.role))
      );
      allow delete: if isAdmin();
    }

    /* OBJECTS */
    match /objects/{objectId} {
      // lectura p√∫blica
      allow read: if true;

      // crear: cualquier autenticado, con campos y valores controlados
      allow create: if request.auth != null
        && request.resource.data.keys().hasOnly([
          'code', 'name', 'date', 'description', 'location',
          'imageUrl', 'status', 'createdAt', 'createdBy'
        ])
        && request.resource.data.createdBy == request.auth.uid
        && request.resource.data.status == 'por entregar'
        && (request.resource.data.createdAt is timestamp);

      // actualizar:
      //  - admin: cualquier campo
      //  - user: SOLO puede cambiar 'status'
      allow update: if request.auth != null && (
        isAdmin() ||
        (
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['status']) &&
          request.resource.data.status in ['por entregar','entregado','de baja']
        )
      );

      // eliminar: solo admin
      allow delete: if isAdmin();
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
